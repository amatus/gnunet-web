// libgnunet_plugin_transport_http_client - HTTP client transport plugin
// Copyright (C) 2014  David Barksdale <amatus@amatus.name>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

(function(FUNCTION_TABLE_OFFSET, parentModule) {
  var plugin = 'http_client';
  var send = Runtime.addFunction(function(cls, session, msgbuf, msgbuf_size,
      priority, to, cont, cont_cls) {
    parentModule.print('http_client: send');
    return -1;
  });
  var disconnect_peer = Runtime.addFunction(function(cls, target) {
    parentModule.print('http_client: disconnect_peer');
    return;
  });
  var disconnect_session = Runtime.addFunction(function(cls, session) {
    parentModule.print('http_client: disconnect_session');
    return -1;
  });
  var update_session_timeout = Runtime.addFunction(function(cls, peer,
      session) {
    parentModule.print('http_client: update_session_timeout');
    return;
  });
  var update_inbound_delay = Runtime.addFunction(function(cls, peer, session,
      delay) {
    parentModule.print('http_client: update_inbound_delay');
    return;
  });
  var query_keepalive_factor = Runtime.addFunction(function(cls) {
    parentModule.print('http_client: query_keepalive_factor');
    return -1;
  });
  var address_pretty_printer = Runtime.addFunction(function(cls, type, addr,
      addrlen, numeric, timeout, asc, asc_cls) {
    parentModule.print('http_client: address_pretty_printer');
    return;
  });
  var check_address = Runtime.addFunction(function(cls, addr, addrlen) {
    parentModule.print('http_client: check_address');
    return -1;
  });
  var address_to_string_ret = parentModule.allocate(1024, 'i8', ALLOC_NORMAL);
  var address_to_string = Runtime.addFunction(function(cls, addr, addrlen) {
    if (!addr) {
      parentModule.print('address_to_string: no address');
      return 0;
    }
    if (addrlen < 8) {
      parentModule.print('address_to_string: address too short: ' + addrlen);
      return 0;
    }
    var options = parentModule.getValue(addr, 'i8') << 24
      |  parentModule.getValue(addr + 1, 'i8') << 16
      |  parentModule.getValue(addr + 2, 'i8') << 8
      |  parentModule.getValue(addr + 3, 'i8');
    var urlen = parentModule.getValue(addr + 4, 'i8') << 24
      |  parentModule.getValue(addr + 5, 'i8') << 16
      |  parentModule.getValue(addr + 6, 'i8') << 8
      |  parentModule.getValue(addr + 7, 'i8');
    if (addrlen != urlen + 8) {
      parentModule.print('address_to_string: address wrong size: ' + addrlen + ' != ' + (urlen + 8));
      return 0;
    }
    var address = parentModule.Pointer_stringify(addr + 8, urlen);
    parentModule.writeArrayToMemory(
        parentModule.intArrayFromString(plugin + '.' + options + '.' + address),
        address_to_string_ret);
    return address_to_string_ret;
  });
  var string_to_address = Runtime.addFunction(function(cls, addr, addrlen, buf,
        added) {
    parentModule.print('http_client: string_to_address');
    return -1;
  });
  var get_session = Runtime.addFunction(function(cls, address) {
    parentModule.print('http_client: get_session');
    return 0;
  });
  var get_network = Runtime.addFunction(function(cls, session) {
    parentModule.print('http_client: get_network');
    return -1;
  });
  return {
    _libgnunet_plugin_transport_http_client_init:
      Runtime.addFunction(function(env) {
        var cls = 0;
        var ptrs = [
          cls,
          send,
          disconnect_peer,
          disconnect_session,
          update_session_timeout,
          update_inbound_delay,
          query_keepalive_factor,
          address_pretty_printer,
          check_address,
          address_to_string,
          string_to_address,
          get_session,
          get_network];
        var api = _malloc(ptrs.length * 4);
        for (var i = 0; i < ptrs.length; ++i) {
          setValue(api + i * 4, ptrs[i], 'i32');
        }
        return api;
      })
  };
});

// vim: set expandtab ts=2 sw=2 filetype=javascript:
