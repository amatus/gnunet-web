;; index.cljs.hl - The gnunet-web website
;; Copyright (C) 2013,2014  David Barksdale <amatus@amatus.name>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(page "index.html"
      (:require [amatus.code :as code]
                [gnunet-web.core :as core]
                [gnunet-web.filesharing :as filesharing]
                [gnunet-web.hostlist :as hostlist]
                [gnunet-web.metadata :as metadata]
                [gnunet-web.service :as service]
                [gnunet-web.transport :as transport])
      (:require-macros [cljs.core.async.macros :refer [go]]))

(set! *print-fn* #(.log js/console %))

(defn peer-id-short
  [peer]
  (.substr (code/base32-crockford peer) 0 4))

(defc my-id [])
(transport/monitor (fn [message] (reset! my-id (:public-key message))))
(defc peers {})
(transport/monitor-peers (fn [message]
                           (swap! peers
                                  #(-> %
                                    (assoc-in [(:peer message) :transport-state]
                                              (:state message))
                                    (assoc-in [(:peer message) :address]
                                              (:address message))
                                    (assoc-in [(:peer message) :plugin]
                                              (:plugin message))))))
(core/monitor-peers (fn [message]
                      (if (not (= 6 (:state message)))
                        (swap! peers assoc-in [(:peer message) :core-state]
                               (:state message)))))

(defc active-search nil)
(defc search-results [])
(defn start-search
  [query anonymity]
  (go
    (let [search (filesharing/start-search query anonymity)]
      (swap! active-search
             (fn [old-search]
               (when old-search
                 (filesharing/stop-search old-search))
               search))
      (reset! search-results [])
      (loop []
        (when-let [info (<! (:ch search))]
          (when (= :search-result (:status info))
            (swap! search-results conj info))
          (recur))))))

(defn start-download
  [uri filename anonymity]
  (go
    (let [download (filesharing/start-download uri anonymity)]
      (js/console.warn (clj->js download))
      (loop []
        (when-let [info (<! (:ch download))]
          (js/console.warn (clj->js info))
          (recur))))))

(def topology-worker (service/start-worker "topology"
                                           "js/gnunet-daemon-topology.js"))
(hostlist/fetch-and-process!)

(defelem ui-search
         [attr kids]
         (let [input (input :type "text" :placeholder "Keywords...")]
           (form :class "ui action input"
                 :submit #(start-search (.-value input) 0)
                 input
                 (div :class "ui icon button"
                      (i :class (cell= (if active-search
                                         "loading icon"
                                         "search icon"))
                         :click #(start-search (.-value input) 0))))))

(html
  (head
    (link :rel "stylesheet" :type "text/css" :href "css/semantic.min.css")
    (script :src "js/semantic.min.js"))
  (body
    (div :class "ui header"
         :title (cell= (code/base32-crockford my-id))
         (text "My Peer ID: ~(peer-id-short my-id)\u2026"))
    (ui-search)
    (table :class "ui table segment"
           :toggle (cell= (seq search-results))
           (thead
             (tr
               (th :text "File")
               (th :text "Metadata")))
           (tbody
             (loop-tpl :bindings [result search-results]
                       (let [uri (cell= (:uri result))
                             filename (cell= (filesharing/guess-filename
                                               (:metadata result)))]
                         (tr
                           (td (a :href uri
                                  :click #(do
                                            (start-download @uri @filename 0)
                                            false)
                                  :text filename))
                           (td (pre :text (cell= (metadata/pretty-print
                                                   (:metadata result))))))))))
    (table :class "ui table segment"
           (thead
             (tr
               (th :text "Peer ID")
               (th :text "Transport State")
               (th :text "Core State")
               (th :text "Address")))
           (tbody
             (loop-tpl :bindings [[peer info] peers]
                       (tr
                         (td :width "25%"
                             :title (cell= (code/base32-crockford peer))
                             (text "~(peer-id-short peer)\u2026"))
                         (td :width "25%"
                             :text (cell= (transport/state->string
                                            (:transport-state info))))
                         (td :width "25%"
                             :text (cell= (core/state->string
                                            (:core-state info))))
                         (td :width "25%"
                             :text (cell= (transport/addr->string
                                            (:address info))))))))))

;; vim: set expandtab ts=2 sw=2 filetype=clojure :
