;; index.cljs.hl - The gnunet-web website
;; Copyright (C) 2013,2014  David Barksdale <amatus@amatus.name>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(page "index.html"
      (:require [amatus.code :as code]
                [gnunet-web.core :as core]
                [gnunet-web.extractor :as extractor]
                [gnunet-web.filesharing :as filesharing]
                [gnunet-web.hostlist :as hostlist]
                [gnunet-web.metadata :as metadata]
                [gnunet-web.service :as service]
                [gnunet-web.transport :as transport]
                [gnunet-web.util :refer [now]])
      (:require-macros [cljs.core.async.macros :refer [go go-loop]]
                       [fence.core :refer [+++]]))

(set! *print-fn* #(.log js/console %))

(defc browser-support
      (cond
        (not (exists? js/MessageChannel))
        "This website requires MessageChannel support. Try Chromium or Google Chrome."
        (not (exists? js/SharedWorker))
        "This website requires SharedWorker support. Try Chromium or Google Chrome."))

(defn peer-id-short
  [peer]
  (.substr (code/base32-crockford peer) 0 4))

(defc my-id [])
(transport/get-my-peer-id (fn [peer-id] (reset! my-id peer-id)))
(defc peers {})
(transport/monitor-peers (fn [message]
                           (swap! peers
                                  #(-> %
                                    (assoc-in [(:peer message) :transport-state]
                                              (:state message))
                                    (assoc-in [(:peer message) :address]
                                              (:address message))))))
(core/monitor-peers (fn [message]
                      (if (not (= 6 (:state message)))
                        (swap! peers assoc-in [(:peer message) :core-state]
                               (:state message)))))

(defc active-search nil)
(defc search-results [])
(defn start-search
  [query anonymity]
  (let [search (filesharing/start-search query anonymity)]
    (swap! active-search
           (fn [old-search]
             (when old-search
               (filesharing/stop-search old-search))
             search))
    (reset! search-results [])
    (go-loop
      []
      (when-let [info (<! (:ch search))]
        (when (= :search-result (:status info))
          (swap! search-results conj info))
        (recur)))))

(defn start-download
  [uri anonymity state-cell progress-cell object-cell]
  (let [download (filesharing/start-download uri anonymity)
        buffer (js/Uint8Array. (:size download))]
    (go-loop
      []
      (when-let [info (<! (:ch download))]
        (when (= :download-start (:status info))
          (reset! state-cell :downloading))
        (when (= :download-completed (:status info))
          (reset! object-cell
                  ;; XXX this needs to be revoked when we're finished
                  (.createObjectURL
                    js/URL
                    (js/Blob. (array buffer)
                              (js-obj "type" "application/octet-stream"))))
          (reset! state-cell :complete))
        (when (zero? (:depth info))
          (let [offset (:offset info)
                dst (.subarray buffer
                               offset
                               (+ offset (.-length (:data info))))]
            (.set dst (:data info))))
        (reset! progress-cell (if (zero? (:size info))
                                0
                                (/ (:completed info) (:size info))))
        (recur)))))

(defn start-publish
  [keywords metadata file anonymity state-cell progress-cell uri-cell]
  (let [reader (js/FileReader.)]
    (set!
      (.-onload reader)
      (fn [e]
        (let [publish (filesharing/start-publish
                        (.-result (.-target e))
                        keywords
                        metadata
                        {:expiration (+ (* 2 356.24 24 60 60 1000 1000) (now))
                         :anonymity anonymity
                         :priority 365
                         :replication 1})]
          (go-loop
            []
            (when-let [info (<! (:ch publish))]
              (when (= :publish-start (:status info))
                (reset! state-cell :active))
              (when (= :publish-progress (:status info))
                (reset! progress-cell (if (zero? (:size info))
                                        0
                                        (/ (:completed info) (:size info)))))
              (when (= :publish-completed (:status info))
                (reset! uri-cell (:uri info))
                (reset! state-cell :complete))
              (recur))))))
    (.readAsArrayBuffer reader file)))

(try
  (def topology-worker (service/start-worker "topology"
                                           "js/gnunet-daemon-topology.js"))
  (catch :default e
    nil))

(hostlist/fetch-and-process!)

(defc anonymity 1)

(defelem ui-search
         [attr kids]
         (let [input (input :type "text" :placeholder "Keywords...")]
           (form :class "ui action input"
                 :submit #(start-search (.-value input) @anonymity)
                 input
                 (div :class "ui icon button"
                      (i :class (cell= (if active-search
                                         "loading icon"
                                         "search icon"))
                         :click #(start-search (.-value input) @anonymity))))))

(defelem ui-publish
         [attr kids]
         (let [file-chosen (cell false)
               publish-state (cell :inactive)
               publish-progress (cell 0)
               publish-uri (cell nil)
               metadata (atom nil)
               keywords (input :type "text")
               file (input :type "file"
                           :change
                           (fn [e]
                             (swap! metadata
                                    (fn [metadata]
                                      (extractor/metadata-destroy metadata)
                                      (extractor/metadata-extract
                                        (aget (.-files (.-target e)) 0))))
                             (set! (.-value keywords)
                                   (filesharing/keywords-from-metadata
                                     @metadata))
                             (reset! file-chosen true)))]
           (div :class "ui form segment"
                (div :class "ui labeled input"
                     (div :class "ui label" "Choose a file to publish")
                     file)
                (div :class "ui labeled input"
                     :toggle file-chosen
                     (div :class "ui label" "Keywords")
                     keywords)
                (div :class "ui icon button"
                     :title "Publish"
                     :toggle file-chosen
                     :click #(start-publish (.-value keywords)
                                            @metadata
                                            (aget (.-files file) 0)
                                            @anonymity
                                            publish-state
                                            publish-progress
                                            publish-uri)
                     (i :class "upload icon large"))
                (div :class "ui progress"
                     :toggle (cell= (not (= :inactive publish-state)))
                     (div :class "bar"
                          :css (cell= {:width (str (* 100 publish-progress)
                                                   "%")})))
                (a :class "item"
                   :href publish-uri
                   :toggle (cell= (= :complete publish-state))
                   :click #(do false)
                   (i :class "external share icon")))))

(defn dropdownify
  [dropdown]
  (with-init! (+++ (.dropdown (js/$ dropdown))))
  dropdown)

(defelem ui-anonymity
         [{:keys [state] :as attr} kids]
         (div (dissoc attr :state)
              (text "Anonymity")
              (div :class "ui label"
                   (dropdownify
                     (div :class "ui dropdown"
                          (input :type "hidden"
                                 :value state
                                 :change #(reset! state (.-value (.-target %))))
                          (div :class "text" "1")
                          (i :class "dropdown icon")
                          (div :class "menu"
                               (div :class "item" "0")
                               (div :class "item" "1")
                               (div :class "item" "2")
                               (div :class "item" "3")))))))

(html
  (head
    (link :rel "stylesheet" :type "text/css" :href "css/semantic.min.css")
    (title "gnunet.io - A GNUnet Web Application"))
  (body
    (div :class "ui fixed main menu grid" ; grid somehow fixes things here too
         (div :class "container"
              (div :class "right item"
                   (a :href "https://github.com/amatus/gnunet-web"
                      :title "Fork me on GitHub"
                      (i :class "github icon")))
              (ui-anonymity :class "right item"
                            :state anonymity)
              (div :class "item"
                   :title (cell= (code/base32-crockford my-id))
                   (text "My Peer ID: ~(peer-id-short my-id)\u2026"))))
    (div :class "ui grid") ; This pushes content down so it's not under the menu
    (div :class "ui inverted segment"
         :toggle (cell= (not (nil? browser-support)))
         (div :class "ui red header" :text browser-support))
    (ui-publish)
    (ui-search)
    (table :class "ui table segment"
           :toggle (cell= (seq search-results))
           (thead
             (tr
               (th :text "File")
               (th :text "Metadata")))
           (tbody
             (loop-tpl :bindings [result search-results]
                       (let [uri (cell= (:uri result))
                             filename (cell= (extractor/guess-filename
                                               (:metadata result)))
                             download-state (cell :inactive)
                             download-progress (cell 0)
                             download-object (cell nil)]
                         (tr
                           (td
                             (div :class "ui compact menu"
                                  (a :class "item"
                                     :href uri
                                     :click #(do
                                               (start-download @uri
                                                               @anonymity
                                                               download-state
                                                               download-progress
                                                               download-object)
                                               false)
                                     (i :class "download icon")
                                     (text "~{filename}")))
                             (div :class "ui progress"
                                  :toggle (cell= (not (= :inactive
                                                         download-state)))
                                  (div :class "bar"
                                       :css (cell=
                                              {:width
                                               (str (* 100 download-progress)
                                                    "%")})))
                             (a :href download-object
                                :download filename
                                :toggle (cell= (= :complete
                                                  download-state))
                                (div :class "ui icon button"
                                     (i :class "save icon"))))
                           (td (pre :text (cell= (metadata/pretty-print
                                                   (:metadata result))))))))))
    (table :class "ui table segment"
           (thead
             (tr
               (th :text "Peer ID")
               (th :text "Transport State")
               (th :text "Core State")
               (th :text "Address")))
           (tbody
             (loop-tpl :bindings [[peer info] peers]
                       (tr
                         (td :width "25%"
                             :title (cell= (code/base32-crockford peer))
                             (text "~(peer-id-short peer)\u2026"))
                         (td :width "25%"
                             :text (cell= (transport/state->string
                                            (:transport-state info))))
                         (td :width "25%"
                             :text (cell= (core/state->string
                                            (:core-state info))))
                         (td :width "25%"
                             :text (cell= (:address info)))))))))

;; vim: set expandtab ts=2 sw=2 filetype=clojure :
